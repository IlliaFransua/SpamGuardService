from model import SpamDetectionModel
from archive_spam_detection_model import ArchiveSpamDetectionModel
import pandas as pd
from typing import List, Tuple


def prepare_dataset() -> Tuple[List[str], List[int]]:
    test_df = pd.read_csv('dataset/spam_text_test_dataset.csv')
    test_df = test_df.dropna(subset=["text"])

    spam_test_texts = test_df[test_df["label"] == 1]["text"].tolist()
    non_spam_test_texts = test_df[test_df["label"] == 0]["text"].tolist()

    test_texts = spam_test_texts + non_spam_test_texts
    test_labels = [1] * len(spam_test_texts) + [0] * len(non_spam_test_texts)

    return test_texts, test_labels


def test_archive_model() -> None:
    spam_detector = ArchiveSpamDetectionModel()

    test_texts, test_labels = prepare_dataset()

    correct_predictions = 0

    print("Testing Archive Spam Detection Model...")

    for text, true_label in zip(test_texts, test_labels):
        result = spam_detector.predict(text)
        predicted_label = 1 if result else 0

        if predicted_label == true_label:
            correct_predictions += 1

        # print(f"Text: {text}\nPredicted as: {'Spam' if predicted_label else 'Not Spam'} | True label: {'Spam' if true_label == 1 else 'Not Spam'}\n")

    total_tests = len(test_texts)
    accuracy = (correct_predictions / total_tests) * 100 if total_tests > 0 else 0

    print(f"Accuracy: {accuracy:.2f}%")

def test_current_model() -> None:
    spam_detector = SpamDetectionModel()

    test_texts, test_labels = prepare_dataset()

    correct_predictions = 0

    print("Testing Current Spam Detection Model...")

    for text, true_label in zip(test_texts, test_labels):
        result = spam_detector.predict(text)
        predicted_label = 1 if result else 0

        if predicted_label == true_label:
            correct_predictions += 1

        # print(f"Text: {text}\nPredicted as: {'Spam' if predicted_label else 'Not Spam'} | True label: {'Spam' if true_label == 1 else 'Not Spam'}\n")

    total_tests = len(test_texts)
    accuracy = (correct_predictions / total_tests) * 100 if total_tests > 0 else 0

    print(f"Accuracy: {accuracy:.2f}%")

def easy_test() -> None:
    # –ü–∞–∫–µ—Ç –∫–∞–≤–µ—Ä–∑–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤ –¥–ª—è –º–æ–¥–µ–ª—ñ
    model = SpamDetectionModel(threshold=0.6)

    test_cases = {
        # –Ø–≤–Ω–∏–π –º–∞—Ç
        "–ü—Ä–æ—Å—Ç–æ –±–ª*—è—Ç—å": None,
        # –ú–∞—Ç –∑ —Å–∏–º–≤–æ–ª–∞–º–∏
        "–±*–ª—è–¥—å, —Ü–µ –ø—ñ–∑–¥–∞—Ç–æ": None,
        # –û–±—Ñ—É—Å–∫–∞—Ü—ñ—è —Ü–∏—Ñ—Ä–∞–º–∏
        "–ø1–∑–¥a": None,
        # –ê–Ω–≥–ª–æ-—É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º—ñ–∫—Å
        "free –≥—Ä–æ—à—ñ, –øo–ªy—áu": None,
        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        "–ü—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏?": None,
        # –†–µ–∫–ª–∞–º–∞ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        "–ö—É–ø–∏ –∞–π—Ñ–æ–Ω —Ç—É—Ç: https://spam.example.com": None,
        # –ö–æ—Ä–∏—Å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        "–û—Ç—Ä–∏–º–∞–π—Ç–µ –∑–Ω–∏–∂–∫—É 20% –Ω–∞ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏": None,
        # –û–±—Ä–∞–∑–∞ –Ω–∞ –∞–¥—Ä–µ—Å—É –ø–æ–ª—ñ—Ç–∏–∫–∞
        "–ø—É—Ç—ñ–Ω—Ö**–ª–æ": None,
        # –°–∫–ª–∞–¥–Ω–∞ —Ñ—Ä–∞–∑–∞ –∑ –º–∞—Ç–æ–º
        "–Ω–µ –ª—ñ–∑—å, –±–ª*—Ç—å, –≤ –º–æ—ó api": None,
        # –ó–≤–∏—á–∞–π–Ω—ñ —Å–ª–æ–≤–∞, —Å—Ö–æ–∂—ñ –Ω–∞ –º–∞—Ç
        "–±–∞–ª–µ—Ç": None,
        "–±–ª—é—Ç—É—Å": None,
        # –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–∞ –µ–º–æ–¥–∑—ñ
        "–ª–æ–ª üòÇ –ø—ñ–∑–¥–∞—Ç–æ!": None,
    }

    print("=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ ===")
    for text in test_cases:
        try:
            prob = model.predict_spam_chance(text)
            is_spam = model.predict(text)
            print(f"""–¢–µ–∫—Å—Ç: {text[:50]}{'...' if len(text)>50 else ''}
  –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å —Å–ø–∞–º—É: {prob:.3f}, –í—ñ–¥–Ω–µ—Å–µ–Ω–æ —è–∫: {'SPAM' if is_spam else 'NOT SPAM'}""")
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ '{text[:30]}...': {e}")
        print("-------------------------")

if __name__ == "__main__":
    # test_archive_model()
    print("===========")
    # test_current_model()
    easy_test()
